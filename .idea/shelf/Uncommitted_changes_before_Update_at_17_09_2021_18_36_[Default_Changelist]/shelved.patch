Index: com/ceruti/photomanagergui/mainGUI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import logging\r\nimport os\r\nimport re\r\nimport shutil\r\nimport subprocess\r\nimport time\r\nimport wx\r\nfrom send2trash import send2trash\r\n\r\n#TODO platform indipendence ma prima porting su windows\r\n#TODO scremare immagini e altri tipi di file eventualmente spostando i file uso il comando file?\r\n#TODO aggiungere i log al livello giusto\r\n#TODO GESTIONE ERRORI DA MIGLIORARE\r\n#TODO far capire cosa succede\r\n#TODO IMPOSTARE CORRETTAMENTE I PERMESSI\r\n#TODO cambiare i nomi dei file con vecchionome.nuovonoveconmd5.estensione ??\r\n#TODO sistemare pulsanti e barre di avanzamento\r\n#TODO attenzione a mettere le virgolette a inizio e fine nome file!!!!!\r\n#TODO ancora più importante controllare modalità apertura file (append vs truncate vs readonly)\r\n#TODO mettere il mese in numero\r\n#TODO radio button per dire se fai o no backup delle importate\r\n#TODO riorganizzare interfaccia grafica\r\n#TODO NB sistemare data con metadata giusti. EXIF\r\n\r\ndef loadFileExtensionList(self,filepath=\"/tmp/\",extensionList=[],firstcall=True):\r\n    if firstcall is True:\r\n        extensionList=[]\r\n    try:\r\n        for file in os.listdir(filepath):\r\n            if os.path.isdir(filepath+\"/\"+file):\r\n                loadFileExtensionList(self,filepath+\"/\"+file,extensionList,False)\r\n                pass\r\n            else:\r\n                ext=os.path.splitext(filepath+\"/\"+file)\r\n                if ext[1] !=\"\":\r\n                    if ext[1] not in extensionList:\r\n                        extensionList.append(ext[1])\r\n                        logging.debug(\"Aggiunta \"+ext[1]+\" alla lista delle estensioni\")\r\n                        self.gauge.SetValue(self.gauge.GetValue()+1)\r\n                        if self.gauge.GetValue()>=self.gauge.GetRange():\r\n                            self.gauge.SetValue(0)\r\n    except Exception as e:\r\n        print(e)\r\n    return extensionList\r\n\r\ndef CheckAndLoadProperties(workingdir='c:\\\\Users\\\\Davide\\\\PycharmProjects\\\\photoManagerGUI',filenameGlob=\"default.props\",filenameMstr=\".masterrepository.conf\"):\r\n    myHashGlob={}\r\n    myHashGlob['fileconfprincipale']=filenameGlob\r\n    logging.debug(\"fileconfprincipale: \"+filenameGlob)\r\n    myHashGlob['masterrepositoryconf']=filenameMstr\r\n    with open(os.path.join(workingdir,filenameGlob),encoding=\"utf-8\") as f:\r\n        for line in f.readlines():\r\n            # print(line)\r\n            match = re.search('^masterrepository=(.*)', line)\r\n            # print(match)\r\n            if match:\r\n                myHashGlob['masterrepository'] = match[1]\r\n            match = re.search('^importfolder=(.*)', line)\r\n            if match:\r\n                myHashGlob['importfolder'] = match[1]\r\n                logging.debug(\"Trovato folder import nel file di configurazione: \"+str(match[1]))\r\n            match = re.search('^importfilelist=(.*)', line)\r\n            if match:\r\n                myHashGlob['importfilelist'] = match[1]\r\n    logging.debug(myHashGlob)\r\n    # with open(myHashGlob['masterrepository']+'\\\\'+filenameMstr, encoding=\"utf-8\") as f:\r\n    #     for line in f.readlines():\r\n    #         match = re.search('^masterrepositoryfilelist=(.*)', line)\r\n    #         if match:\r\n    #             myHashGlob['masterrepositoryfilelist'] = match[1]\r\n    #         match = re.search('^masterrepositoryisready=(.*)', line)\r\n    #         if match:\r\n    #             myHashGlob['masterrepositoryisready'] = match[1]\r\n    #         match = re.search('^masterrepositorysize=(.*)',line)\r\n    #         if match:\r\n    #             myHashGlob['masterrepositorysize']=match[1]\r\n    logging.debug(\"Dopo caricamento repository: \"+str(myHashGlob))\r\n    return myHashGlob\r\n\r\nclass PhotoManagerAppFrame(wx.Frame):\r\n    def __init__(self,parent,title):\r\n        logging.root.setLevel('INFO')\r\n        wx.Panel.__init__(self, parent, title=title, size=(700, 600))\r\n        max_gauge_size=675\r\n        self.checkRunning=True\r\n        #self.globpropsHash=CheckAndLoadProperties(\"C:\\\\Users\\\\c333053\\\\Downloads\",\"default.props\",\".masterrepository.conf\")\r\n        self.globpropsHash=CheckAndLoadProperties(\"C:\\\\Users\\\\Davide\\\\PhotoManager\",\"default.props\",\".masterrepository.conf\")\r\n        logging.debug(str(self.globpropsHash))\r\n        self.importDirFileExtensions={}\r\n        self.importfileHash={}\r\n        self.importMd5fileHash={}\r\n        self.mstrfileHash={}\r\n        self.copyfileHash={}\r\n        self.skippedfileHash={}\r\n        self.loggingDict={}\r\n        self.importDirError=0\r\n        self.copymode=0\r\n\r\n        self.gauge = wx.Gauge(self, pos=(5, 540),size=(max_gauge_size,-1))\r\n        self.gauge.SetRange(max_gauge_size)\r\n        self.gauge.SetValue(0)\r\n        self.treeTitle = wx.StaticText(self, label=\"Scegliere Cartella File Da Importare:\",pos=(5,5),size=(345,25))\r\n\r\n        self.propertyList = wx.StaticText(self, label=\"Parametri caricati: \\n\" + self.stringFormattedHash(),pos=(355, 5))\r\n\r\n\r\n        self.avviaCaricaListaEstensioni = wx.Button(self, label=\"Mostra estensioni file presenti nel folder Import \", pos=(5, 300))\r\n        self.avviaCaricaListaEstensioni.Bind(wx.EVT_BUTTON, self.AvviaCaricaEstensioni)\r\n        self.avviaCopiaFile = wx.Button(self, label=\"Avvia Import In Archivio Master\", pos=(5, 325))\r\n        self.avviaCopiaFile.Bind(wx.EVT_BUTTON, self.AvviaCopiaFile)\r\n        self.esci=wx.Button(self,label=\"ESCI\",pos=(5,450),size=(350,-1))\r\n        self.esci.Bind(wx.EVT_BUTTON,self.Esci)\r\n\r\n        self.importDirList=wx.GenericDirCtrl(self,pos=(5,30),size=(345,200),style=wx.DIRCTRL_DIR_ONLY)\r\n        self.importDirList.SetPath(\"c:\\\\temp\")\r\n        self.importDirList.SelectPath(\"c:\\\\temp\", select=True)\r\n        self.importDirList.Bind(wx.EVT_DIRCTRL_SELECTIONCHANGED,self.SelezionaImportFolder)\r\n\r\n        self.modoCopia = wx.RadioBox(self, label=\"Azione Su File Correttamente Importati:\", majorDimension=3,pos=(5, 230), size=(345, -1),choices=[\"nessuna azione\",\"cestino archivio\", \"cestino windows\"])\r\n\r\n\r\n        self.SetFocus()\r\n        self.loggerFS=logging.getLogger(\"filesystemstuff\")\r\n        self.Center()\r\n        self.Show(True)\r\n\r\n    def stringFormattedHash(self):\r\n        result=\"\"\r\n        for k in self.globpropsHash.keys():\r\n            result=result+k+\" = \"+str(self.globpropsHash[k])+\"\\n\"\r\n        return result\r\n    def SelezionaImportFolder(self,evt):\r\n        if self.importDirList.GetPath():\r\n            self.globpropsHash['importfolder']=self.importDirList.GetPath()\r\n        self.propertyList.SetLabel(\"Parametri caricati: \\n\" + self.stringFormattedHash())\r\n\r\n    def AvviaCaricaEstensioni(self,evt):\r\n        print(\"**********   \"+self.globpropsHash['importfolder'])\r\n        self.SelezionaImportFolder(evt)\r\n        print(\"**********   \"+self.globpropsHash['importfolder'])\r\n        messaggioEstensioni=str(loadFileExtensionList(self,self.globpropsHash['importfolder'],True))\r\n        messaggioFolderImport=self.globpropsHash['importfolder']\r\n        self.gauge.SetValue(self.gauge.GetRange())\r\n        self.messageExtension=wx.MessageBox(\"Nel folder import \"+messaggioFolderImport+\"\\nci sono i seguenti tipi di file: \\n\"+messaggioEstensioni,'',wx.CLOSE)\r\n        logging.info(messaggioEstensioni)\r\n        self.gauge.SetValue(0)\r\n\r\n    def Esci(self,evt):\r\n        self.Close()\r\n        pass\r\n\r\n\r\n    def CostruisciImport(self,dir=\"tmp\"):\r\n        for file in os.listdir(dir):\r\n            if os.path.isdir(dir + \"/\" + file):\r\n                self.CostruisciImport(dir + \"/\" + file)\r\n                pass\r\n            else:\r\n                # print(dir+\"/\"+file)\r\n                fileconpath = dir + \"/\" + file\r\n                match2 = re.search('^\\..*', file)\r\n                if match2 is None:\r\n                    if fileconpath not in self.importfileHash.keys():\r\n                        self.gauge.SetValue((self.gauge.GetValue() + 1))\r\n                        self.gauge.Refresh()\r\n                        PhotoManagerApp.Yield()\r\n                        #p = subprocess.run('md5 ' + \"\\\"\" + dir + \"/\" + file + \"\\\"\", shell=True, universal_newlines=True,stdout=subprocess.PIPE)\r\n                        md5command = 'certutil -hashfile ' + dir + '\\\\' + file + ' MD5'\r\n                        logging.debug(md5command)\r\n                        p = subprocess.run(md5command, shell=True, universal_newlines=True,\r\n                                           stdout=subprocess.PIPE)\r\n                        PhotoManagerApp.Yield()\r\n                        #match = re.search(\"MD5 \\((.*)\\) = (.*)\", str(p.stdout))\r\n                        filerow = dir + '\\\\' + file + '|' + str(p.stdout).split('\\n')[1] + '\\n'\r\n                        f2.writelines(filerow)\r\n                        logging.debug(filerow)\r\n                        f2.flush()\r\n            if self.checkRunning is False:\r\n                break\r\n        f2.close()\r\n\r\n    def AvviaCopiaFile(self,evt):\r\n        self.importDirError=0\r\n        self.CopiaFile(self.globpropsHash['importfolder'])\r\n        self.mstrfileHash.clear()\r\n        self.importfileHash.clear()\r\n        self.copyfileHash.clear()\r\n        self.skippedfileHash.clear()\r\n        self.gauge.SetValue(self.gauge.GetRange())\r\n        if self.importDirError==0:\r\n            okMD5 = wx.MessageDialog(self, \"Copia File Terminata\" ,style=wx.ICON_INFORMATION,caption=\"Copia Terminata\")\r\n            okMD5.ShowModal()\r\n        self.gauge.SetValue(0)\r\n\r\n    def CopiaFile(self,dir=\"C:\\\\Users\\\\c333053\\\\TestImport\",round=0):\r\n        n=round+self.gauge.GetRange()\r\n        if os.path.exists(dir):\r\n            for file in os.scandir(dir):\r\n                logging.debug(\"FILE CORRENTE>>>>>\"+str(file.path))\r\n                if file.is_dir():\r\n                    logging.debug(\"CopiaFile.DIR: \"+str(file.path))\r\n                    self.CopiaFile(file,n)\r\n                else:\r\n                    logging.debug(\"CopiaFile.FILE: \"+str(file.path))\r\n                    md5command = 'certutil -hashfile \\\"' + str(file.path) + '\\\" MD5'\r\n                    logging.debug(md5command)\r\n                    p = subprocess.run(md5command, shell=True, universal_newlines=True,stdout=subprocess.PIPE)\r\n                    if p.returncode==0:\r\n                        srcfile=os.fsdecode(file)\r\n                        dstroot=self.globpropsHash['masterrepository']\r\n                        logging.debug(\"File Sorgente: \"+srcfile)\r\n                        dstyearfolder=time.strftime(\"%Y\",time.gmtime(os.path.getmtime(file)))\r\n                        dstmonthfolder=time.strftime(\"%m\",time.gmtime(os.path.getmtime(file)))\r\n                        md5filename=str(p.stdout).split('\\n')[1]\r\n                        dstext=os.path.splitext(file)[1].lower()\r\n                        dstfile=dstroot+\"\\\\\"+dstyearfolder+\"\\\\\" +dstmonthfolder+\"\\\\\"+md5filename+dstext\r\n                        logging.debug(\"File Destinazione: \"+dstfile)\r\n                        self.globpropsHash['masterrepository_bin']=self.globpropsHash['masterrepository']+\"\\\\cestino\"\r\n                        self.copymode=self.modoCopia.GetSelection()\r\n                        logging.debug(\"SELEZIONE BOTTONE: \"+str(self.copymode))\r\n                        if not os.path.exists(self.globpropsHash['masterrepository_bin']):\r\n                            os.makedirs(self.globpropsHash['masterrepository_bin'])\r\n                            logging.debug(\"FOLDER_CESTINO_ARCHIVIO:\"+self.globpropsHash['masterrepository_bin'])\r\n                        if not os.path.exists(dstroot+\"\\\\\"+dstyearfolder+\"\\\\\"+dstmonthfolder):\r\n                            os.makedirs(dstroot+\"\\\\\"+dstyearfolder+\"\\\\\"+dstmonthfolder)\r\n                        if not os.path.exists(dstfile):\r\n                            logging.debug(\"File: \"+dstfile+\"Non Esiste, lo copio\")\r\n                            try:\r\n                                shutil.copy2(srcfile,dstfile,follow_symlinks=False)\r\n                                logging.info(\"<<COPIATO>>File: \"+srcfile+\" su \"+dstfile)\r\n                                if self.copymode==1:\r\n                                    try:\r\n                                        shutil.move(srcfile, self.globpropsHash['masterrepository_bin'], copy_function='copy2')\r\n                                    except IOError as e:\r\n                                        logging.error(\"<<ERRORE SPOSTAMENTO FILE:>>File: \"+srcfile+\" su \"+dstfile)\r\n                                if self.copymode==2:\r\n                                    try:\r\n                                        send2trash(srcfile)\r\n                                    except IOError as e:\r\n                                        logging.error(\"<<ERRORE CESTINO:>>File: \"+srcfile+\"****\"+str(e))\r\n\r\n                            except IOError as e:\r\n                                logging.error(\"<<ERRORE COPIA>>File: \"+srcfile+\" su \"+dstfile)\r\n                        else:\r\n                            if self.copymode==1:\r\n                                try:\r\n                                    shutil.move(srcfile, self.globpropsHash['masterrepository_bin'], copy_function='copy2')\r\n                                except IOError as e:\r\n                                    logging.error(\"<<ERRORE SPOSTAMENTO FILE:>>File: \"+srcfile+\" su \"+dstfile)\r\n                            if self.copymode==2:\r\n                                try:\r\n                                    send2trash(srcfile)\r\n                                except IOError as e:\r\n                                    logging.error(\"<<ERRORE CESTINO:>>File: \"+srcfile+\"****\"+str(e))\r\n                            logging.info(\"<<SKIPPED>>File: \"+srcfile+\" identico a \"+md5filename+dstext)\r\n                    else:\r\n                        logging.debug(\"Errore nel file: \"+str(file.path))\r\n                        errorMD5 = wx.MessageDialog(self, \"Calcolo MD5 con errori per il file: \" + str(file.path), style=wx.ICON_ERROR,caption=\"errore MD5\")\r\n                        errorMD5.ShowModal()\r\n                n+=1\r\n                if n>=self.gauge.GetRange():\r\n                    self.gauge.Pulse()\r\n                else:\r\n                    self.gauge.SetValue(n)\r\n        else:\r\n            self.importDirError=1\r\n            dlg = wx.MessageDialog(self, \"Directory Import Inesistente\", style=wx.ICON_ERROR,caption=\"Directory Import Inesistente\")\r\n            dlg.ShowModal()\r\n\r\nif __name__ == '__main__':\r\n    PhotoManagerApp=wx.App()\r\n    framePrincipale = PhotoManagerAppFrame(None,\"PhotoManager\")\r\n    PhotoManagerApp.MainLoop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/com/ceruti/photomanagergui/mainGUI.py b/com/ceruti/photomanagergui/mainGUI.py
--- a/com/ceruti/photomanagergui/mainGUI.py	(revision 51b9a18a5f4ed07c1583cd982c8d93f001f5a4f6)
+++ b/com/ceruti/photomanagergui/mainGUI.py	(date 1631547946312)
@@ -79,7 +79,7 @@
 
 class PhotoManagerAppFrame(wx.Frame):
     def __init__(self,parent,title):
-        logging.root.setLevel('INFO')
+        logging.root.setLevel('DEBUG')
         wx.Panel.__init__(self, parent, title=title, size=(700, 600))
         max_gauge_size=675
         self.checkRunning=True
